import type { ProjectQuestionsConfig } from '@/types'
import { toMutableOptions } from '@/utils/fit-options'
import { COMMON_CODE_QUALITY_TOOLS_OPTIONS, COMMON_LANGUAGE_OPTIONS, COMMON_MANAGER_OPTIONS, COMMON_PATH_ALIASING_OPTIONS } from '../options/common'
import {
  HONO_AUTH_OPTIONS,
  HONO_DATABASE_OPTIONS,
  HONO_JSX_LIBRARIES_OPTIONS,
  HONO_MIDDLEWARE_OPTIONS,
  HONO_PURPOSE_OPTIONS,
  HONO_RUNTIME_OPTIONS,
  HONO_TEST_FRAMEWORKS_OPTIONS,
  HONO_VALIDATION_LIBRARIES_OPTIONS,
} from '../options/features/hono'

export const honoQuestions: ProjectQuestionsConfig = {
  projectType: 'hono',
  questions: [
    {
      id: 'language',
      type: 'select',
      message: 'Which language would you like to use?',
      field: 'language',
      options: toMutableOptions(COMMON_LANGUAGE_OPTIONS),
      initialValue: 'typescript',
    },
    {
      id: 'pkgManager',
      type: 'select',
      message: 'Which package manager would you like to use?',
      field: 'pkgManager',
      options: toMutableOptions(COMMON_MANAGER_OPTIONS),
      initialValue: 'pnpm',
    },
    {
      id: 'codeQuality',
      type: 'select',
      message: 'Which code quality tools would you like to use?',
      field: 'codeQualityTools',
      options: toMutableOptions(COMMON_CODE_QUALITY_TOOLS_OPTIONS),
      initialValue: 'eslint',
    },
    {
      id: 'codeQualityConfig',
      type: 'confirm',
      message: 'Would you like to configure code quality tools for VSCode?',
      field: 'codeQualityConfig',
      initialValue: true,
    },
    {
      id: 'honoRuntime',
      type: 'select',
      message: 'Select a runtime environment for Hono:',
      field: 'runtime',
      options: toMutableOptions(HONO_RUNTIME_OPTIONS),
      initialValue: 'node',
    },
    {
      id: 'honoPurpose',
      type: 'select',
      message: 'What is the primary purpose of this application?',
      field: 'purpose',
      options: toMutableOptions(HONO_PURPOSE_OPTIONS),
      initialValue: 'rest',
    },
    {
      id: 'honoJsxLibrary',
      type: 'select',
      message: 'If Full-Stack (SSR), select a JSX library:',
      field: 'jsxLibrary',
      options: toMutableOptions(HONO_JSX_LIBRARIES_OPTIONS),
      when: {
        type: 'cascade',
        situation: [{ field: 'purpose', value: 'ssr', operator: 'eq' }],
      },
      initialValue: 'react',
    },
    {
      id: 'honoValidation',
      type: 'select',
      message: 'Select a validation library:',
      field: 'validationLibrary',
      options: toMutableOptions(HONO_VALIDATION_LIBRARIES_OPTIONS),
      initialValue: 'zod',
    },
    {
      id: 'honoOpenapi',
      type: 'confirm',
      message: 'Add OpenAPI (Swagger) documentation support?',
      field: 'openapi',
      when: {
        type: 'cascade',
        situation: [{ field: 'validationLibrary', value: 'zod', operator: 'eq' }],
      },
      initialValue: true,
    },
    {
      id: 'honoDatabase',
      type: 'select',
      message: 'Select a database ORM / toolkit:',
      field: 'database',
      options: toMutableOptions(HONO_DATABASE_OPTIONS),
      initialValue: 'none',
    },
    {
      id: 'honoAuth',
      type: 'select',
      message: 'Add authentication middleware?',
      field: 'auth',
      options: toMutableOptions(HONO_AUTH_OPTIONS),
      initialValue: 'none',
    },
    {
      id: 'honoMiddlewares',
      type: 'multiselect',
      message: 'Add other common middlewares?',
      field: 'middlewares',
      options: toMutableOptions(HONO_MIDDLEWARE_OPTIONS),
      initialValues: ['cors', 'logger'],
    },
    {
      id: 'honoTestFramework',
      type: 'select',
      message: 'Select a testing framework:',
      field: 'testFramework',
      options: toMutableOptions(HONO_TEST_FRAMEWORKS_OPTIONS),
      initialValue: 'vitest',
    },
    {
      id: 'modulePathAliasing',
      type: 'select',
      message: 'Which module path aliasing would you like to use?',
      field: 'modulePathAliasing',
      options: toMutableOptions(COMMON_PATH_ALIASING_OPTIONS),
      initialValue: '@',
    },
  ],
}
